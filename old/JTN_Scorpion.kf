;   JTN - SCORPION
;     __ __
;    |S1|E1|
;  __|__|__|
; |R |B |
; |__|__|__
;    |S2|E2|
;    |__|__|
;
;   B - GROWS S1 S2 AND R CELLS, AND HEALS THEM
;          MOVES WHEN TOLD TO AND ROTATES WHEN TOLD
;   R - MAKES SPORES AND MAY EAT, FERTILIZES SPORES
;   S - LOOKS FOR FOOD AND SPORES, MAY EAT
;          GROWS AND HEALS E1 OR E2
;   E - EATS ALL THE TIME
;   MOODS:
;   B - 0 = NONE
;       1 = MAKE BABY
;       2 = GO FORWARD AND EAT
;   S - 0 = ALL CLEAR
;       PACKED 2 VECTORS

MAIN: ;(BRAIN)
{
   1 R8! 0 R9!
   BRAIN CALL
}
BRAIN:
{
   R9 -1 * R8 2DUP HAS-NEIGHBOR NOT GROWS1 IF 2POP
   R9 R8 -1 * 2DUP HAS-NEIGHBOR NOT GROWS1 IF 2POP
   R8 R9 2NEGATE 2DUP HAS-NEIGHBOR NOT GROWR IF 2POP
   R9 -1 * R8 MOOD
   R9 R8 -1 * MOOD
   2DUP
   = BOBEY BTHINK IFELSE
   R8 R9 OMOVE POP
   1 ?LOOP
}
BOBEY:
{
   POP UNPACK2 2DUP
   0 = SWAP 0 = AND {2POP 1 MOOD!}
      {FACE CALL 2 MOOD!} IFELSE
}
BTHINK:
{
   2DUP
   UNPACK2 R8 R9 2EQU SWAP UNPACK2 R8 R9 2EQU XOR { ;IF EITHER ARE NOT FORWARD
      2DUP
      UNPACK2 R8 R9 2NEGATE 2EQU CALL SWAP UNPACK2 R8 R9 2NEGATE 2EQU CALL OR { ;IF EITHER BACK
         UNPACK2 R8 R9 0 ROTVET 2EQU {
            R8 R9 0 ROTVET CALL FACE CALL
         } IF
         UNPACK2 R8 R9 1 ROTVET 2EQU {
            R8 R9 1 ROTVET CALL FACE CALL
         } IF
      } { ;AH JUST TURN LEFT =D KIS
         2POP R8 R9 0 ROTVET CALL FACE CALL
      } IFELSE
   } IF
}
FACE:
{
   2DUP ;2DUP USE IF YOU WANT IT TO KEEP PREV VECTOR
   0= SWAP 0= OR { ;IF IT IS NOT DIAGONAL
      SWAP R8 = SWAP R9 = AND NOT { ;IF IT IS DIF FROM CUR DIR
         2DUP 2DUP
         R8 R9 1 ROTVET CALL ROT = ROT ROT = AND { ;ROTATE CCW
            R8
            R9 -1 * R8!
            R9!
            R8 R9 PACK2 BROADCAST
            -1 ROTATE POP
         } IF
         R8 R9 0 ROTVET CALL ROT = ROT ROT = AND { ;ROTATE CW
            R8
            R9 R8!
            -1 * R9!
            R8 R9 PACK2 BROADCAST
            1 ROTATE POP
         } IF
         R8 R9 2NEGATE ROT = ROT ROT = AND { ;180 TURN CW
            R8 -1 * R8!
            R9 -1 * R9!
            R8 R9 PACK2 BROADCAST
            1 ROTATE POP
            1 ROTATE POP
         } IF
      } {
         2POP
      }IFELSE
   } {
      2POP 2POP
   } IFELSE
}
GROWS1:
{
   2DUP
   GROW -1 = SEARCH1 IF
   R8 R9 PACK2 SEND
}
SEARCH1:
{
   1 NEAREST PACK2 MOOD!
   7 NEAREST EAT POP
   RECV UNPACK2 2DUP 0= SWAP 0= AND NOT { ;CHECK IF MES ARRIVED
      R8! R9!
   } IF 2POP
   R8 R9 GROW -1 = EAT1 IF
   1 ?LOOP
}
GROWS2:
{
   2DUP
   GROW -1 = SEARCH1 IF
   R8 R9 PACK2 SEND
}
EAT1:
{
   7 NEAREST EAT POP 1 ?LOOP
}
GROWR:
{
   2DUP
   GROW -1 = REPROD IF
   R8 R9 PACK2 SEND
}
REPROD:
{
   RECV UNPACK2 2DUP 0= SWAP 0= AND NOT { ;CHECK IF MES ARRIVED
      R8! R9!
   } IF 2POP
   R8 R9 MOOD 1 = {
      R8 R9 2NEGATE 2DUP ENERGY 7 / MAKE-SPORE POP
      0 MAKE-SPORE POP
      R8 R9 2DUP 2DUP 2DUP 2DUP
      OMOVE POP
      OMOVE POP
      OMOVE POP
      OMOVE POP
      OMOVE POP
   } {
      7 NEAREST EAT POP
   } IFELSE
   1 ?LOOP
}
ROTVET: ;ROTATE VECTORS 1 2, 90 DEGREES COUNTER IF 0 OR CLOCK
{
   2DUP
   0 = {-1 * SWAP} IF
   1 = {SWAP -1 *} IF
}
2EQU: ;COMPARES 4 3 TO 2 1 RETURNS ONE BOOLEAN VALUE
{
   ROT = ROT ROT = AND
}
